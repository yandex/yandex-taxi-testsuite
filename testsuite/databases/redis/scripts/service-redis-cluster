#!/bin/sh

set -e

. $TESTSUITE_LIB_UTILS

[ -z "$REDIS_TMPDIR" ] && die "REDIS_TMPDIR must be set"
[ -z "$REDIS_CONFIGS_DIR" ] && die "REDIS_CONFIGS_DIR must be set"
[ -z "$REDIS_HOST" ] && die "REDIS_HOST must be set"
[ -z "$REDIS_MASTER_PORTS" ] && die "REDIS_MASTER_PORTS must be set"
[ -z "$REDIS_SLAVE_PORTS" ] && die "REDIS_SLAVE_PORTS must be set"

REDIS_DATADIR=$REDIS_TMPDIR/data
REDIS_LOGSDIR=$REDIS_TMPDIR/logs
REDIS_SLEEP_WORKAROUND_SECONDS=${REDIS_SLEEP_WORKAROUND_SECONDS:=2}

REDIS_SERVER=$(which redis-server)
[ -z "$REDIS_SERVER" ] && die "No redis-server binary found"

REDIS_CLI=$(which redis-cli)
[ -z "$REDIS_CLI" ] && die "No redis-cli binary found"

REDIS_INSTS=

start() {
    rm -rf $REDIS_DATADIR

    mkdir -p $REDIS_TMPDIR
    mkdir -p $REDIS_DATADIR
    mkdir -p $REDIS_LOGSDIR

    for port in ${REDIS_MASTER_PORTS} ${REDIS_SLAVE_PORTS}; do
        echo "Starting redis cluster node on $port..."
        config=$REDIS_CONFIGS_DIR/redis_cluster${port}.conf
        pidfile="$(get_pidfile $port)"
        logfile=$REDIS_LOGSDIR/redis_cluster$port.log
        $REDIS_SERVER $config \
                      --pidfile $pidfile \
                      --dir $REDIS_DATADIR \
                      --dbfilename redis_cluster$port.db \
                      --logfile "$logfile" || {
            dump_log_stderr "$logfile"
            die "Failed to start redis ($port) server"
        }

        REDIS_INSTS="$REDIS_INSTS $REDIS_HOST:$port"
    done

    $REDIS_CLI --cluster create $REDIS_INSTS \
        --cluster-replicas 1 \
        --cluster-yes || \
        die "Failed to create a redis cluster"

    sleep $REDIS_SLEEP_WORKAROUND_SECONDS
}

stop() {
    for port in ${REDIS_MASTER_PORTS} ${REDIS_SLAVE_PORTS}; do
        pidfile="$(get_pidfile $port)"
        stop_daemon $REDIS_SERVER $pidfile
    done
}

script_main "$@"
